// import {
// 	getGeolocation,
// 	checkLogin,
// 	getLanguage,
// } from '../service/getData'
import {
 // GEOLOCATION,
 // CHECK_LOGIN,
  //CHANGE_CITY,
  //MYHISTORY,
  DELHISTORY,
 // LANGUAGE,
 // SETLANGUAGE,
  SEARCHHISTORY,
  CHECKMONEY,
} from "./mutation-types.js";
// import {setStore, getStore} from '../config/mUtils'
// import {i18n} from './index.js';
import server from '@/server/getData';
import db from '@/utils/db.js';
//import {store} from "./index";
import {getLocation} from "@js/wxjssdk";

export default {
  async initRongyun({
                      //初始化融云通讯
                      commit,state,dispatch
                    }){
    state.rongCloud.init(function(ret, err) {
      if (ret.status == 'error'){
        window.api.toast({ msg: err.code });
      }
    });
    dispatch("initMessageCount");
    state.rongCloud.setOnReceiveMessageListener(async function(ret) {
      console.log("融云推送信息: "+JSON.stringify(ret.result));
      // window.api.toast({ msg: JSON.stringify(ret.result.message) });
      //监听文本
      if(ret.result.message&&ret.result.message.conversationType=="GROUP"){
        //活动聊天室消息-只包含文本消息
        if(ret.result.message.objectName=="RC:TxtMsg"){//聊天信息
          let type = 2;
          if(!db.getUser(ret.result.message.senderUserId)){
            let userInfo = await server.getUserInfo({userId:ret.result.message.senderUserId});
            db.insertOrUpdateUser([{userId:ret.result.message.senderUserId,userName:userInfo.data.data.aliasName,userIcon:userInfo.data.data.headimgAttachmentId}],state.userId)
          }
          let icon='',name='',activeType='',activeState='';
          if(!db.getUnreadCountByTargetId(ret.result.message.targetId,state.userId)){
				let result;
			 if(ret.result.mseeage.actType==6){
				 result = await server.blindDatingSingle({//活动详情
				  datingDetailsId:ret.result.message.targetId
				});
			 }else{
				 result = await server.getSingle({
				  datingDetailsId:ret.result.message.targetId
				});
			 }
			 if(result.data.data){
				icon=result.data.data.coverimgImages?result.data.data.coverimgImages:result.data.data.jiaoyouUser.headimgAttachmentId;
				name=result.data.data.datingTitle+"-"+result.data.data.jiaoyouUser.aliasName
				activeType=result.data.data.activityMethod
				activeState=result.data.data.state
			 }
          }
          db.insertOrUpdateUnreadCountName(ret.result.message.targetId,type,icon,name,1,ret.result.message.content.text,(ret.result.message.sentTime),ret.result.message.messageId,state.userId,ret.result.message.senderUserId,activeState,activeType)
          db.insertConversation(ret.result.message.targetId,type,'123','',ret.result.message.senderUserId,ret.result.message.content.text,ret.result.message.sentTime,'',state.userId,null,null,null,ret.result.message.messageId,null,null)
          if(ret.result.message.targetId==state.currentChatRoomId){
            let dataChats=db.getConversation(ret.result.message.targetId,state.userId,100000);
            db.resetCount(ret.result.message.targetId,state.userId);
            commit('CHANGECHATROOMMESSAGELIST',dataChats)
          }
          if(!state.active){//弹出通知消息
            let name = db.getUserName(ret.result.message.senderUserId)
            let notificationStatus = db.getNotificationStatus(ret.result.message.targetId,state.userId)
            if(notificationStatus!=='0'){
              window.api.notification({
                notify: {
                  title: name,
                  content: ret.result.message.content.text
                }
              });
            }
          }
          dispatch("getConversationList")
        }else if(ret.result.message&&ret.result.message.objectName=="RC:VcMsg"){
          // console.log("接收到了语音消息"+JSON.stringify(ret.result))
          if(!db.getUser(ret.result.message.senderUserId)){
            let userInfo = await server.getUserInfo({userId:ret.result.message.senderUserId});
            db.insertOrUpdateUser([{userId:ret.result.message.senderUserId,userName:userInfo.data.data.aliasName,userIcon:userInfo.data.data.headimgAttachmentId}],state.userId)
          }
          let type = 2;
          let icon='',name='',activeType='',activeState='';
          if(!db.getUnreadCountByTargetId(ret.result.message.targetId,state.userId)){
            let result;
			if(ret.result.mseeage.actType==6){
				 result = await server.blindDatingSingle({//活动详情
				  datingDetailsId:ret.result.message.targetId
				});
			 }else{
				 result = await server.getSingle({
				  datingDetailsId:ret.result.message.targetId
				});
			 }
			if(result.data.data){
				icon=result.data.data.coverimgImages?result.data.data.coverimgImages:result.data.data.jiaoyouUser.headimgAttachmentId;
				name=result.data.data.datingTitle+"-"+result.data.data.jiaoyouUser.aliasName
				activeType=result.data.data.activityMethod
				activeState=result.data.data.state
			}
          }
          db.insertOrUpdateUnreadCountName(ret.result.message.targetId,type,icon,name,1,'[语音]',(ret.result.message.sentTime),ret.result.message.messageId,state.userId,ret.result.message.senderUserId,activeState,activeType)
          db.insertConversation(ret.result.message.targetId,type,'123','',ret.result.message.senderUserId,null,ret.result.message.sentTime,ret.result.message.content.duration,state.userId,null,null,ret.result.message.content.voicePath,ret.result.message.messageId,null,null)
          if(ret.result.message.targetId==state.currentChatRoomId){
            let dataChats=db.getConversation(ret.result.message.targetId,state.userId,100000);
            db.resetCount(ret.result.message.targetId,state.userId);
            commit('CHANGECHATROOMMESSAGELIST',dataChats)
          }
          if(!state.active){//弹出通知消息
            let name = db.getUserName(ret.result.message.senderUserId)
            let notificationStatus = db.getNotificationStatus(ret.result.message.targetId,state.userId)
            if(notificationStatus!=='0')
            window.api.notification({
              notify: {
                title: name,
                content: '[语音]'
              }
            });
          }
          dispatch("getConversationList")
        }else if(ret.result.message.objectName=="RC:CmdMsg"&&ret.result.message.content.name=='SCENE_ACTIVE_INFO'){//活动信息
          //console.log("活动信息"+state.userId+':'+(ret.result.message.content.data))
          let data = JSON.parse(ret.result.message.content.data);
          if(data&&data.state){
            if(!db.getUnreadCountByTargetId(ret.result.message.targetId,state.userId)){
              /*let result = await server.getSingle({
                datingDetailsId:ret.result.message.targetId
              });*/
			  let result;
				if(data.activityMethod==6){
					 result = await server.blindDatingSingle({//活动详情
					  datingDetailsId:ret.result.message.targetId
					});
				 }else{
					 result = await server.getSingle({
					  datingDetailsId:ret.result.message.targetId
					});
				 }
              let icon=result.data.data.coverimgImages?result.data.data.coverimgImages:result.data.data.jiaoyouUser.headimgAttachmentId;
              let name=result.data.data.datingTitle+"-"+result.data.data.jiaoyouUser.aliasName
              let activeType=result.data.data.activityMethod
              let activeState=result.data.data.state
              db.insertOrUpdateUnreadCountName(ret.result.message.targetId,2,icon,name,0,'',(ret.result.message.sentTime),ret.result.message.messageId,state.userId,'',activeState,activeType)
            }else{
              db. updateActiveState(ret.result.message.targetId,state.userId,data.state)
            }
            dispatch("getConversationList");
          }
          if(ret.result.message.targetId==state.currentChatRoomId){
            commit('CHAGECHATROOMINFO',data);
          }
		}/*else if(ret.result.message.objectName=="RC:CmdMsg"&&ret.result.message.content.name=='gift'){
          //收到礼物
		  let gift = JSON.parse(ret.result.message.content.data);
          if(ret.result.message.targetId==state.currentChatRoomId){
            commit('CHANGEGIFTOBJ',gift);
          }
        }*/
      }else if(ret.result.message&&ret.result.message.conversationType=="CHATROOM"){//聊天室
		  if(ret.result.message.objectName=="RC:CmdMsg"&&ret.result.message.content.name=='gift'){
          //收到礼物
		  let gift = JSON.parse(ret.result.message.content.data);
          if(ret.result.message.targetId==state.currentChatRoomId){
            commit('CHANGEGIFTOBJ',gift);
          }
        }
	  }else if(ret.result.message&&ret.result.message.conversationType=="PRIVATE"){
        if(ret.result.message&&ret.result.message.objectName=="RC:CmdMsg"&&ret.result.message.content.name=='gift'){
          //收到礼物
          let gift = JSON.parse(ret.result.message.content.data)
          // if(ret.result.message.targetId==state.currentPrivateId){//当前单聊用户窗口
          //   commit('CHANGEGIFT',gift);
          // }
          if(!db.getUser(ret.result.message.senderUserId)){
            let userInfo = await server.getUserInfo({userId:ret.result.message.senderUserId});
            db.insertOrUpdateUser([{userId:ret.result.message.senderUserId,userName:userInfo.data.data.aliasName,userIcon:userInfo.data.data.headimgAttachmentId}],state.userId)
          }
          let type = ret.result.message.conversationType=="PRIVATE"?1:0;
          db.insertOrUpdateUnreadCount(ret.result.message.senderUserId,type,'http://mis.iceinfo.net:8080/jiaoyou/static/e5.jpg','',1,'[收到礼物]',(ret.result.message.sentTime),ret.result.message.messageId,state.userId,ret.result.message.senderUserId)
          db.insertGift(ret.result.message.senderUserId,type,'http://mis.iceinfo.net:8080/jiaoyou/static/e5.jpg','',ret.result.message.senderUserId,(ret.result.message.sentTime),'',state.userId,ret.result.message.messageId,gift.giftId,gift.giftImage,gift.giftName,gift.giftJiaobi)
          if(!state.active){//弹出通知消息
            let name = db.getUserName(ret.result.message.senderUserId)
            let notificationStatus = db.getNotificationStatus(ret.result.message.targetId,state.userId)
            if(notificationStatus!=='0')
            window.api.notification({
              notify: {
                title: name,
                content: '[收到礼物]'
              }
            });
          }
          commit('CHANGEGETNEWMESSAGE',true)
          dispatch("getConversationList")
        }
        //个人单聊
        if(ret.result.message&&ret.result.message.objectName=="RC:TxtMsg"){
          if(!db.getUser(ret.result.message.senderUserId)){
            let userInfo = await server.getUserInfo({userId:ret.result.message.senderUserId});
            db.insertOrUpdateUser([{userId:ret.result.message.senderUserId,userName:userInfo.data.data.aliasName,userIcon:userInfo.data.data.headimgAttachmentId}],state.userId)
          }
          let type = ret.result.message.conversationType=="PRIVATE"?1:0;
          db.insertOrUpdateUnreadCount(ret.result.message.senderUserId,type,'http://mis.iceinfo.net:8080/jiaoyou/static/e5.jpg','',1,ret.result.message.content.text,(ret.result.message.sentTime),ret.result.message.messageId,state.userId,ret.result.message.senderUserId)
          db.insertConversation(ret.result.message.senderUserId,type,'http://mis.iceinfo.net:8080/jiaoyou/static/e5.jpg','',ret.result.message.senderUserId,ret.result.message.content.text,(ret.result.message.sentTime),'',state.userId,null,null,null,ret.result.message.messageId,null,null)
          if(!state.active){//弹出通知消息
            let name = db.getUserName(ret.result.message.senderUserId)
            let notificationStatus = db.getNotificationStatus(ret.result.message.targetId,state.userId)
            if(notificationStatus!=='0')
            window.api.notification({
              notify: {
                title: name,
                content: ret.result.message.content.text
              }
            });
          }
          commit('CHANGEGETNEWMESSAGE',true)
          dispatch("getConversationList")
        }else if(ret.result.message&&ret.result.message.objectName=="RC:ImgMsg"){
          // console.log("接收到图片消息："+JSON.stringify(ret.result))
          if(!db.getUser(ret.result.message.senderUserId)){
            let userInfo = await server.getUserInfo({userId:ret.result.message.senderUserId});
            db.insertOrUpdateUser([{userId:ret.result.message.senderUserId,userName:userInfo.data.data.aliasName,userIcon:userInfo.data.data.headimgAttachmentId}],state.userId)
          }
          let type = ret.result.message.conversationType=="PRIVATE"?1:0;
          db.insertOrUpdateUnreadCount(ret.result.message.senderUserId,type,'http://mis.iceinfo.net:8080/jiaoyou/static/e5.jpg','',1,'[图片]',(ret.result.message.sentTime),ret.result.message.messageId,state.userId,ret.result.message.senderUserId)
          db.insertConversation(ret.result.message.senderUserId,type,'http://mis.iceinfo.net:8080/jiaoyou/static/e5.jpg','',ret.result.message.senderUserId,null,(ret.result.message.sentTime),'',state.userId,null,ret.result.message.content.imageUrl,null,ret.result.message.messageId,null,null)
          if(!state.active){//弹出通知消息
            let name = db.getUserName(ret.result.message.senderUserId)
            let notificationStatus = db.getNotificationStatus(ret.result.message.targetId,state.userId)
            if(notificationStatus!=='0')
            window.api.notification({
              notify: {
                title: name,
                content: '[图片]'
              }
            });
          }
          commit('CHANGEGETNEWMESSAGE',true)
          dispatch("getConversationList")
        }else if(ret.result.message&&ret.result.message.objectName=="RC:VcMsg"){
          // console.log("接收到了语音消息"+JSON.stringify(ret.result))
          if(!db.getUser(ret.result.message.senderUserId)){
            let userInfo = await server.getUserInfo({userId:ret.result.message.senderUserId});
            db.insertOrUpdateUser([{userId:ret.result.message.senderUserId,userName:userInfo.data.data.aliasName,userIcon:userInfo.data.data.headimgAttachmentId}],state.userId)
          }
          let type = ret.result.message.conversationType=="PRIVATE"?1:0;
          db.insertOrUpdateUnreadCount(ret.result.message.senderUserId,type,'http://mis.iceinfo.net:8080/jiaoyou/static/e5.jpg','',1,'[语音]',(ret.result.message.sentTime),ret.result.message.messageId,state.userId,ret.result.message.senderUserId)
          db.insertConversation(ret.result.message.senderUserId,type,'http://mis.iceinfo.net:8080/jiaoyou/static/e5.jpg','',ret.result.message.senderUserId,null,(ret.result.message.sentTime),ret.result.message.content.duration,state.userId,null,null,ret.result.message.content.voicePath,ret.result.message.messageId,null,null)
          if(!state.active){//弹出通知消息
            let name = db.getUserName(ret.result.message.senderUserId)
            let notificationStatus = db.getNotificationStatus(ret.result.message.targetId,state.userId)
            if(notificationStatus!=='0')
            window.api.notification({
              notify: {
                title: name,
                content: '[语音]'
              }
            });
          }
          commit('CHANGEGETNEWMESSAGE',true)
          dispatch("getConversationList")
        }else if(ret.result.message&&ret.result.message.objectName=="RC:LBSMsg"){
          // console.log("接收到了位置消息"+JSON.stringify(ret.result))
          if(!db.getUser(ret.result.message.senderUserId)){
            let userInfo = await server.getUserInfo({userId:ret.result.message.senderUserId});
            db.insertOrUpdateUser([{userId:ret.result.message.senderUserId,userName:userInfo.data.data.aliasName,userIcon:userInfo.data.data.headimgAttachmentId}],state.userId)
          }
          let type = ret.result.message.conversationType=="PRIVATE"?1:0;
          db.insertOrUpdateUnreadCount(ret.result.message.senderUserId,type,'http://mis.iceinfo.net:8080/jiaoyou/static/e5.jpg','',1,'[地理位置]',(ret.result.message.sentTime),ret.result.message.messageId,state.userId,ret.result.message.senderUserId)
          db.insertConversation(ret.result.message.senderUserId,type,'http://mis.iceinfo.net:8080/jiaoyou/static/e5.jpg','',ret.result.message.senderUserId,null,(ret.result.message.sentTime),ret.result.message.content.duration,state.userId,ret.result.message.content.poi,null,null,ret.result.message.messageId,ret.result.message.content.longitude,ret.result.message.content.latitude)
          if(!state.active){//弹出通知消息
            let name = db.getUserName(ret.result.message.senderUserId)
            let notificationStatus = db.getNotificationStatus(ret.result.message.targetId,state.userId)
            if(notificationStatus!=='0')
            window.api.notification({
              notify: {
                title: name,
                content: '[地理位置]'
              }
            });
          }
          commit('CHANGEGETNEWMESSAGE',true)
          dispatch("getConversationList")
        }
      }else if(ret.result.message&&ret.result.message.conversationType=="GROUP"){
        //群组
        if(ret.result.message.objectName=="RC:TxtMsg"){//聊天信息

        }

      }else if(ret.result.message&&ret.result.message.conversationType=="SYSTEM"){
        //系统

		let data = JSON.parse(ret.result.message.content.data);
		console.log("系统消息:"+JSON.stringify(data));
        if(data&&data.state){
            if(!db.getUnreadCountByTargetId(data.activityId,state.userId)){
              /*let result = await server.getSingle({
                datingDetailsId:ret.result.message.activityId
              });*/
			  let result;
				if(data.activityMethod==6){
					 result = await server.blindDatingSingle({//活动详情
					  datingDetailsId:data.activityId
					});
				 }else{
					 result = await server.getSingle({
					  datingDetailsId:data.activityId
					});
				}
              let icon=result.data.data.coverimgImages?result.data.data.coverimgImages:result.data.data.jiaoyouUser.headimgAttachmentId;
              let name=result.data.data.datingTitle+"-"+result.data.data.jiaoyouUser.aliasName
              let activeType=result.data.data.activityMethod
              let activeState=result.data.data.state
              db.insertOrUpdateUnreadCountName(data.activityId,2,icon,name,0,'',(ret.result.message.sentTime),ret.result.message.messageId,state.userId,'',activeState,activeType)
            }else{
              db. updateActiveState(data.activityId,state.userId,data.state)
            }
            dispatch("getConversationList");
          }
          if(data.activityId==state.currentChatRoomId){
            commit('CHAGECHATROOMINFO',data);//更新现场活动信息
          }
      }
    })
    let connectResult = await new Promise((resolve,reject)=>{
      state.rongCloud.getConnectionStatus(function(ret, err) {
        if(ret.status=='success'||err.code=='-10001'){
          if(ret.result&&ret.result.connectionStatus=='CONNECTED'){
            resolve("已连接")
          }else{
            state.rongCloud.connect({
              token: state.rongYunToken
			},function(ret, err) {
              if (ret.status == 'success'){
                // window.api.toast({ msg: ret.result.userId });
                console.log(ret.result.userId)
                resolve("已连接")
              }else{
                reject("连接失败")
              }
            });
          }
        }else{
          reject("获取连接状态失败")
        }
      })
    })
    state.rongCloud.disableLocalNotification(function(ret, err) {
    })
    dispatch("getConversationList")
    return Promise.resolve('success');
  },
  async conversationNotificationStatus({commit,state,dispatch},obj){
    if(obj.notificationStatus){//设置
      let code =  await new Promise((resolve,reject)=>{
        state.rongCloud&&state.rongCloud.setConversationNotificationStatus({
          conversationType: obj.conversationType,
          targetId: obj.targetId,
          notificationStatus: obj.notificationStatus
        }, function(ret, err) {
          if (ret.status == 'success')
            resolve(ret.result.code)
          else
            reject(err.code)
        })
      })
      return Promise.resolve(code);
    }else{//获取
      let code =  await new Promise((resolve,reject)=>{
        state.rongCloud&&state.rongCloud.getConversationNotificationStatus({
          conversationType: obj.conversationType,
          targetId: obj.targetId
        }, function(ret, err) {
          if (ret.status == 'success')
            resolve(ret.result.code)
          else
            reject(err.code)
        })
      })
      return Promise.resolve(code);
    }
  },
  async getConversationList({commit,state,dispatch}){//获取融云通讯会话列表
    if(state.isBrowser){
      return false;
    }
    let data = db.getUnreadCountList(state.userId);
    commit('CHANGERONGCONVERSATIONLIST',data)
    let count = db.getUnreadCount(state.userId);
    commit('CHANGEUNREADCOUNT',count)
    if(state.syncState){
      let arr=[];
      data.map(v=>{
        if(v.type=="2"&&(v.activeState=="3"||v.activeState=="6")){
          arr.push(v.targetId)
        }
      })
      console.log("获取活动状态")
      let result=await server.getStatusBatch(arr)
      commit('CHANGESYNCSTATE',false)
      let resultArr = result.data.data
      if(resultArr){
        resultArr.map(v=>{
          db. updateActiveState(v.id,state.userId,v.state)
        })
        let data2 = db.getUnreadCountList(state.userId);
        commit('CHANGERONGCONVERSATIONLIST',data2)
      }
    }
  },
  //初始化消息
  initMessageCount({commit,state,dispatch}){
    db.insertUnreadCountMessage(state.userId)
  },
  //插入消息 从服务器获取新的推送消息内容
  async pollingMessage({commit,state,dispatch}){
	if(!state.isBrowser){
		return false;
	}
    dispatch("insertMessage");
  },
  async insertMessage({commit,state,dispatch}){
    let systemTime = '';
    let activeTime = '';
    state.rongConversationList.map(v=>{
      if(v.type==6){
        activeTime = v.time;
      }else if(v.type==5){
        systemTime = v.time;
      }
    })
    let systemNotice = null;
    let activeNotice = null;
    try{
      let data = await server.getMessageList({category:2});//互动消息
      // let data = await server.getMessageList({category:2,createDate:activeTime});//互动消息
      let data2 = await server.getMessageList({category:1});//系统消息
      // let data2 = await server.getMessageList({category:1,createDate:systemTime});//系统消息
      systemNotice = data2.data.data;
      activeNotice = data.data.data;
    }catch (e) {
      console.log(JSON.stringify(e))
    }finally {
      if(state.isBrowser){
        setTimeout(()=>{
			if(state.isGetMessage){//退出后不用获取
				 dispatch("pollingMessage")
			}
        },20000)
      }
    }
    if(state.isBrowser){
      let arr = state.rongConversationList;
      let count=0;
      if(systemNotice){
        let webSystemMessageList = state.webSystemMessageList
        let webSystemMessageDetailsList = state.webSystemMessageDetailsList
        for(let i=0;i<systemNotice.length;i++){
          arr = arr.map(v=>{
            if(v.targetId == '001'){
              v.count = parseInt(v.count)+1;
              v.text = systemNotice[i].msgContent;
              v.time = systemNotice[i].createDate;
              v.messageId = systemNotice[i].id;
            }
            return v;
          })
          //
          webSystemMessageList = webSystemMessageList.map(v=>{
            if(v.TYPE == systemNotice[i].msgType){
              v.COUNT = parseInt(v.COUNT)+1;
              v.TEXT = systemNotice[i].msgContent;
              v.time = systemNotice[i].createDate;
              v.MESSAGE_ID = systemNotice[i].id;
            }
            return v;
          })
          webSystemMessageDetailsList.push({
            "ID":systemNotice[i].id,
            "TYPE":systemNotice[i].msgType,
            "NAME":systemNotice[i].msgType==1?'用户中心':systemNotice[i].msgType==2?'活动通知':'资金中心',
            "TEXT":systemNotice[i].msgContent,
            "time":systemNotice[i].createDate,
            "URL":systemNotice[i].url,
            "CONTENT_TYPE":systemNotice[i].contentType,
            "CONSUME":"0"
          })
        }
        commit('CHANGEWEBSYSTEMMESSAGELIST',webSystemMessageList)
        commit('CHANGEWEBSYSTEMMESSAGEDETAILSLIST',webSystemMessageDetailsList)
      }
      if(activeNotice){
        let webActiveMessageList = state.webActiveMessageList
        for(let i=0;i<activeNotice.length;i++){
          arr = arr.map(v=>{
            if(v.targetId == '002'){
              v.count = parseInt(v.count)+1;
              v.text = activeNotice[i].msgContent;
              v.time = activeNotice[i].createDate;
              v.messageId = activeNotice[i].id;
            }
            return v;
          })
          webActiveMessageList.push({
            "ID":activeNotice[i].id,
            "NAME":activeNotice[i].aliasName,
            "SEX":activeNotice[i].sex,
            "AGE":activeNotice[i].age,
            "ICON":activeNotice[i].headimgAttachment,
            "TEXT":activeNotice[i].msgContent,
            "time":activeNotice[i].createDate,
            "MOMENT_TEXT":activeNotice[i].feedWords,
            "MOMENT_IMG":activeNotice[i].feedFirstImage,
            "URL":activeNotice[i].url
          })
        }
        commit('CHANGEWEBACTIVEMESSAGELIST',webActiveMessageList)
      }
      arr.map(v=>{
        count = count+parseInt(v.count);
      })
      commit('CHANGERONGCONVERSATIONLIST',arr)
      commit('CHANGEUNREADCOUNT',count)
      commit('CHANGEGETNEWNOTICE',true)//广播查找新的通知消息
      dispatch("getConversationList")
    }else{
      if(systemNotice){
        for(let i=0;i<systemNotice.length;i++){
          db.insertOrUpdateUnreadCount('001',5,'','',1,systemNotice[i].msgContent,new Date(Date.parse((systemNotice[i].createDate).replace(/-/g,"/"))).getTime(),systemNotice[i].id,state.userId,'')
          db.insertOrUpdateSystemMessage({
            type:systemNotice[i].msgType,
            name:systemNotice[i].msgType==1?'用户中心':systemNotice[i].msgType==2?'活动通知':'资金中心',
            count:1,
            text:systemNotice[i].msgContent,
            time:new Date(Date.parse((systemNotice[i].createDate).replace(/-/g,"/"))).getTime(),
            messageId:systemNotice[i].id,
          },state.userId)
          db.insertSystemMessageDetails({
            type:systemNotice[i].msgType,
            name:systemNotice[i].msgType==1?'用户中心':systemNotice[i].msgType==2?'活动通知':'资金中心',
            text:systemNotice[i].msgContent,
            time:new Date(Date.parse((systemNotice[i].createDate).replace(/-/g,"/"))).getTime(),
            url:systemNotice[i].url,
            contentType:systemNotice[i].contentType
          },state.userId)
        }
      }
      if(activeNotice){
        for(let i=0;i<activeNotice.length;i++){
          db.insertOrUpdateUnreadCount('002',6,'','',1,activeNotice[i].msgContent,new Date(Date.parse((activeNotice[i].createDate).replace(/-/g,"/"))).getTime(),activeNotice[i].id,state.userId,'')
          db.insertActiveMessage({
            sex:activeNotice[i].sex,
            name:activeNotice[i].aliasName,
            age:activeNotice[i].age,
            icon:activeNotice[i].headimgAttachment,
            text:activeNotice[i].msgContent,
            time:new Date(Date.parse((activeNotice[i].createDate).replace(/-/g,"/"))).getTime(),
            momentText:activeNotice[i].feedWords,
            momentImg:activeNotice[i].feedFirstImage,
            url:activeNotice[i].url,
          },state.userId)
        }
      }
      commit('CHANGEGETNEWNOTICE',true)//广播查找新的通知消息
      dispatch("getConversationList")
    }
  },
  async initJpush({commit,state,dispatch}){
    let ajpush  = window.api.require('ajpush');
    if(window.api.systemType != "ios"){
      await new Promise((resolve,reject)=>{
        ajpush.init(function(ret) {
          resolve(ret)
        });
      })
    }else{
      ajpush.setBadge({
        badge:0
      });
    }
    ajpush.getRegistrationId(function(ret) {
      if(ret.id){
        server. update_ajpush(ret.id)
        commit('CHANGEREGISTRATIONID',ret.id)
      }
    });
    ajpush.setListener(
      function(ret) {
        console.log("极光推送监听消息："+JSON.stringify(ret))
        if(ret.extra){
          dispatch("insertMessage")
        }
      }
    );
    return Promise.resolve('success');
  },
  async updateUserInfo({commit,state,dispatch},userId){
    let userInfo = await server.getUserInfo({userId:userId});
    db.insertOrUpdateUser([{userId:userId,userName:userInfo.data.data.aliasName,userIcon:userInfo.data.data.headimgAttachmentId}],state.userId)
    return Promise.resolve('success');
  },
  async getCoordsFromName({commit,state,dispatch},city,area){
    try{
      let map = window.api.require('bMap');
      if(window.api.systemType == "ios"){
        await new Promise((resolve,reject)=>{
          map.initMapSDK(function(ret) {
            if (ret.status) {
              resolve("success")
            }else{
              reject("failed")
            }
          });
        })
      }
      let obj=await new Promise((rs,rj)=>{
        let timer = setTimeout(()=>{
          rj("timerfailed")
        },5000)
        map.getCoordsFromName({
          city: city,
          address: city+" "+area
        }, function(ret, err) {
          clearTimeout(timer);
          if (ret.status) {
            rs(ret)
          }else{
            rj("getCoordsFromNamefailed")
          }
        });
      })
      return Promise.resolve(obj)
    }catch (e) {
      return Promise.resolve({
        lon:0.00,
        lat:0.00
      })
    }
  },
  async getMylocation({state}){
    console.log("state.isWeixin:"+state.isWeixin);
    if(state.isWeixin){
      try{
        let GPS ={
          x_pi: 3.14159265358979324 * 3000.0 / 180.0,
          bd_encrypt(gcjLat, gcjLon) {
            let x = gcjLon, y = gcjLat;
            let z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * this.x_pi);
            let theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * this.x_pi);
            let bdLon = z * Math.cos(theta) + 0.0065;
            let bdLat = z * Math.sin(theta) + 0.006;
            return {'lat' : bdLat,'lon' : bdLon};
          }
        }
        let position=await getLocation();
        //console.log(JSON.stringify(position));
        let obj=await new Promise((resolve,reject)=>{
			let timer = setTimeout(()=>{
			  reject("timerfailed")
			},5000);
			let json = GPS.bd_encrypt(position.latitude, position.longitude);
			let bdMapObj={//应用内百度地图模块返回的值
				status: false,              //布尔型；true||false
				province: '',              //字符串类型；省份
				city: '',                  //字符串类型；城市
				district: '',              //字符串类型；县区
				streetName: '',            //字符串类型；街道名
				streetNumber: '',          //字符串类型；街道号
				country:'',                //字符串类型；国家
				countryCode:'',            //字符串类型；国家代码
				adCode:'',                 //字符串类型；行政区域编码
				businessCircle:'',         //字符串类型；商圈名称
				sematicDescription:'',     //字符串类型；结合当前位置POI的语义化结果描述
				cityCode:'',               //字符串类型；城市编码
				lon: json.lon,              //数字类型；经度
				lat: json.lat,               //数字类型；纬度
				address: '',               //字符串类型；地址信息
				poiList:[{                 //数组类型；经纬度点热点列表
				   name: '',               //字符串类型；热点名称
				   uid: '',                //字符串类型；热点id
				   address: '',            //字符串类型；热点地址
				   city: '',               //字符串类型；热点所在城市
				   phone: '',              //字符串类型；热点电话
				   postcode: '',           //字符串类型；热点邮编
				   epoitype: '',           //字符串类型；热点类型，0:普通点 1:公交站 2:公交线路 3:地铁站 4:地铁线路
				   coord: {                //JSON对象；热点坐标信息
					  lat:'' ,               //数字类型；热点纬度
					  lon:''               //数字类型；热点经度
				   }
				}]
			};
			let url="http://api.map.baidu.com/geocoder/v2/?ak=ccUFvD5ASGQqictfXpLuFGdt&callback=renderReverse&location="+json.lat+","+json.lon+"&output=json&pois=0"
			$.ajax({ 
				type: "GET", 
				dataType: "jsonp", 
				url: url, 
				success: function (data) { 
					if(data.status==0){
						//alert(JSON.stringify(data.result));
						bdMapObj.province=data.result.addressComponent.province;
						bdMapObj.city=data.result.addressComponent.city;
						bdMapObj.district=data.result.addressComponent.district;
						bdMapObj.streetName=data.result.addressComponent.street;
						bdMapObj.streetNumber=data.result.addressComponent.street_number;
						bdMapObj.country=data.result.addressComponent.country;
						bdMapObj.countryCode=data.result.addressComponent.country_code;
						bdMapObj.adCode=data.result.addressComponent.adcode;
						bdMapObj.businessCircle=data.result.business;
						bdMapObj.sematicDescription=data.result.sematic_description;
						bdMapObj.cityCode=data.result.cityCode;
						bdMapObj.address=data.result.formatted_address;
						resolve(bdMapObj);
					}else{
						reject("failed"); 
					}
				}, 
				error: function (XMLHttpRequest, textStatus, errorThrown) { 
					reject(json.lat+","+json.lon+"地址位置获取失败"); 
				} 
			});
		});
        return Promise.resolve(obj)
      }catch(e){
		console.log("定位失败");
		return Promise.resolve({
          lon:0.00,
          lat:0.00
        });
      }
    }else{
      try{
        let map = window.api.require('bMap');
        if(window.api.systemType == "ios"){
          await new Promise((resolve,reject)=>{
            map.initMapSDK(function(ret) {
              if (ret.status) {
                resolve("success")
              }else{
                reject("failed")
              }
            });
          })
        }
        let result = await new Promise((resolve,reject)=>{
          let timer = setTimeout(()=>{
            reject("timerfailed")
          },5000)
          map.getLocation({
            accuracy: '10m',
            autoStop: true,
            filter: 1
          }, function(ret, err) {
            clearTimeout(timer);
            if (ret.status) {
              resolve(ret)
            } else {
              setTimeout(()=>{
                map.getLocation({
                  accuracy: '10m',
                  autoStop: true,
                  filter: 1
                }, function(ret, err) {
                  if (ret.status) {
                    resolve(ret)
                  } else {
                    reject("getLocationfailed")
                  }
                });
              },1000)
            }
          });
        });
        let obj=await new Promise((rs,rj)=>{
          let timer = setTimeout(()=>{
            rj("timerfailed")
          },5000)
          map.getNameFromCoords({
            lon: result.lon,
            lat: result.lat
          }, function(ret, err) {
            clearTimeout(timer);
            if (ret.status) {
              rs(ret)
              console.log("结果："+JSON.stringify(ret))
            }else{
              rj("getNameFromCoordsfailed")
            }
          });
        })
        return Promise.resolve(obj)
      }catch (e) {
        return Promise.resolve({
          lon:0.00,
          lat:0.00
        })
      }
    }
  },
  /*async getGeolocation(
    {
      //获取地理位置
      commit,
      state
    },
    mapfrom = "pc"
  ) {
    if (!state.isGetAddress || mapfrom == "city") {
      try {
        const res = await getGeolocation(mapfrom);
        commit(GEOLOCATION, res);
        //commit(CHANGE_CITY, { name: res.city });
        return await Promise.resolve({ code: 200 }); //成功获取
      } catch (err) {
        //当await 返回reject时会触发
        console.log("locationError:" + err);
        return await Promise.resolve({ code: 500 }); //获取失败
      }
    } else {
      return await Promise.resolve({ code: 201 }); //已经获取过
    }
  },*/
  async checkLogin({commit,state},readonly) {//检查是否登录
    if(!state.isCheck) {
		try {
			const Authorization = window.$api.getStorage('Authorization');
			if(Authorization){
				readonly=readonly?{readonly:true}:{};//readonly为了不显示没登录时的提示
				const result=await server.getUserByToken({
					Authorization:"Bearer "+Authorization,
					...readonly
				});
				commit("CHECK_LOGIN",result.data);
				commit("LOGIN",result.data.data);//登录成功,获得用户信息
				commit("CHANGEACCESSTOKEN",{
					token:Authorization,
					userId:result.data.data.id
				});
				return await Promise.resolve({code:200});//成功获取
			}else{
				return await Promise.resolve({code:500});//获取失败
			}
		} catch (err) {
			console.log(err);
			commit("CHECK_LOGIN",err.data);
			return await Promise.resolve({ code: 500 }); //获取失败
		}
    }
    return await Promise.resolve({ code: 201 }); //已经获取过
  },
  /*[MYHISTORY]({ commit, dispatch }) {
    //刚进应用时获取一下历史记录
    dispatch("checkLogin", true).then(() => {
      commit(MYHISTORY, {});
    });
  },*/
  async [DELHISTORY]({ commit }, id) {
    commit(DELHISTORY, id);
    return await Promise.resolve({ code: 200, msg: "删除成功" }); //马上返回结果
  },
  /*async [LANGUAGE]({ commit }) {
    //刚进应用时获取一下语言
    let lan;
    if (getStore("language")) {
      lan = JSON.parse(getStore("language"));
      commit(SETLANGUAGE, lan);
      return await Promise.resolve(lan); //已经获取过
    } else {
      lan = i18n.locale;
      return await getLanguage(lan).then(language => {
        commit(SETLANGUAGE, language);
        return Promise.resolve(language); //已经获取过
      });
    }
  },*/
  [SEARCHHISTORY]({ commit }) {
    //第一次获取搜索历史
    commit(SEARCHHISTORY, {});
  },
	async [CHECKMONEY]({commit}){//查询拥有当前拥有的乾坤币
		return await server.getUserMoney().then((res)=>{
			if(res.data.data){
				commit("EDITUSERINFO",{key:"userMoney",value:res.data.data});
			}
		});
	}
};
